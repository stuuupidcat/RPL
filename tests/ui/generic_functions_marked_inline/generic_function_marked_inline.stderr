error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/generic_functions_marked_inline/generic_function_marked_inline.rs:2:1
   |
LL |   #[inline]
   |   --------- `#[inline]` here
LL | / pub fn foo1<T>(x: T) -> T {
LL | |
LL | |     x
LL | | }
   | |_^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)
   = note: `-D rpl::generic-function-marked-inline` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::generic_function_marked_inline)]`

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/generic_functions_marked_inline/generic_function_marked_inline.rs:18:5
   |
LL |       #[inline]
   |       --------- `#[inline]` here
LL | /     pub fn foo3<T>(x: T) -> T {
LL | |
LL | |         x
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/generic_functions_marked_inline/generic_function_marked_inline.rs:24:5
   |
LL |       #[inline]
   |       --------- `#[inline]` here
LL | /     pub fn foo4(self) -> S {
LL | |
LL | |         self.field
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/generic_functions_marked_inline/generic_function_marked_inline.rs:31:1
   |
LL |   #[inline]
   |   --------- `#[inline]` here
LL | / pub fn parse_str(wat: impl AsRef<str>) -> Result<Vec<u8>, ()> {
LL | |
LL | |     _parse_str(wat.as_ref())
LL | | }
   | |_^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: aborting due to 4 previous errors

