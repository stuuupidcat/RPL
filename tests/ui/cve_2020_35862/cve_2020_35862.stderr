error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:166:5
   |
LL |       #[inline]
   |       --------- `#[inline]` here
LL | /     pub fn as_slice<'a>(&self) -> &'a [T] {
...  |
LL | |         unsafe { slice::from_raw_parts(self.pointer().r, self.elements()) }
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)
   = note: `-D rpl::generic-function-marked-inline` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::generic_function_marked_inline)]`

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:189:5
   |
LL |       #[inline]
   |       --------- `#[inline]` here
LL | /     pub fn as_mut_slice<'a>(&self) -> &'a mut [T] {
...  |
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:201:5
   |
LL |       #[inline]
   |       --------- `#[inline]` here
LL | /     pub fn head(&self) -> BitIdx<T> {
...  |
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:216:5
   |
LL |       #[inline]
   |       --------- `#[inline]` here
LL | /     pub fn len(&self) -> usize {
...  |
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: use a pointer from `std::vec::Vec<T>` after it's moved
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:513:43
   |
LL |         unsafe { BitBox::from_raw(pointer.as_mut_ptr()) }
   |                                           ^^^^^^^^^^^^ used here
   |
note: the `std::vec::Vec<T>` value may be moved here
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:511:26
   |
LL |         mem::forget(self.into_boxed_slice());
   |                          ^^^^^^^^^^^^^^^^^^
   = note: `#[deny(rpl::use_after_move)]` on by default

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:484:5
   |
LL |       #[inline]
   |       --------- `#[inline]` here
LL | /     pub unsafe fn from_raw_parts(pointer: BitPtr<T>, capacity: usize) -> Self {
...  |
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:497:5
   |
LL |       #[inline(always)]
   |       ----------------- `#[inline]` here
LL | /     pub fn into_vec(self) -> Vec<T> {
...  |
LL | |         out
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35862/cve_2020_35862.rs:519:5
   |
LL |       #[inline]
   |       --------- `#[inline]` here
LL | /     pub fn into_boxed_slice(self) -> Box<[T]> {
...  |
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: aborting due to 8 previous errors

