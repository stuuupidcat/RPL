error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35860/cve_2020_35860.rs:33:5
   |
LL |       #[inline(always)]
   |       ----------------- `#[inline]` here
LL |       /// Wrap the pointer in a `CBox`.
LL | /     pub fn new(ptr: *mut D::RefTo) -> Self {
LL | |
LL | |         CBox { ptr }
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)
   = note: `-D rpl::generic-function-marked-inline` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::generic_function_marked_inline)]`

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35860/cve_2020_35860.rs:39:5
   |
LL |       #[inline(always)]
   |       ----------------- `#[inline]` here
LL |       /// Returns the internal pointer.
LL | /     pub unsafe fn as_ptr(&self) -> *mut D::RefTo {
LL | |
LL | |         self.ptr
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve_2020_35860/cve_2020_35860.rs:45:5
   |
LL |       #[inline(always)]
   |       ----------------- `#[inline]` here
LL |       /// Returns the internal pointer.
LL | /     pub unsafe fn unwrap(self) -> *mut D::RefTo {
LL | |
LL | |         let ptr = self.ptr;
LL | |         std::mem::forget(self);
LL | |         ptr
LL | |     }
   | |_____^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: Dereference of a possibly null pointer
  --> tests/ui/cve_2020_35860/cve_2020_35860.rs:57:24
   |
LL |             let text = CStr::from_ptr(self.ptr);
   |                        ^^^^^^^^^^^^^^^--------^
   |                        |              |
   |                        |              pointer created here
   |                        dereference here
   |
   = note: this is because the pointer may be null
   = note: `#[deny(rpl::deref_null_pointer)]` on by default

error: aborting due to 4 previous errors

