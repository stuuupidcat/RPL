pattern CVE-2018-21000

patt {
    p_from_T_to_u8[
        $T: type
    ] = #[mir] pub fn _ (..) -> _ {
        let $from_vec: alloc::vec::Vec::<$T> = _;
        let $from_vec_mut_borrow: &mut alloc::vec::Vec::<$T> = &mut $from_vec;
        let $from_vec_non_null: core::ptr::non_null::NonNull::<u8> = copy (*$from_vec_mut_borrow).buf.inner.ptr.pointer;
        let $from_vec_mut_ptr: *mut $T = copy $from_vec_non_null as *mut $T (Transmute);
        let $from_vec_immutable_borrow_1: &alloc::vec::Vec::<$T> = &$from_vec;
        let $from_vec_cap_usize_no_high_bit: core::num::niche_types::UsizeNoHighBit = copy (*$from_vec_immutable_borrow_1).buf.inner.cap;
        let $from_vec_cap_usize: usize = copy $from_vec_cap_usize_no_high_bit as usize (Transmute);
        let $tsize1: usize = SizeOf($T);
        let $to_vec_cap: usize = Mul(move $from_vec_cap_usize, move $tsize1);
        let $from_vec_immutable_borrow_2: &alloc::vec::Vec::<$T> = &$from_vec;
        let $from_vec_len: usize = copy (*$from_vec_immutable_borrow_2).len;
        let $tsize2: usize = SizeOf($T);
        let $to_vec_len_usize: usize = Mul(move $from_vec_len, move $tsize2);
        let $to_vec_mut_ptr: *mut u8 = copy $from_vec_mut_ptr as *mut u8 (PtrToPtr);
        let $to_vec_len_usize_no_high_bit: core::num::niche_types::UsizeNoHighBit = #[Ctor] core::num::niche_types::UsizeNoHighBit(copy $to_vec_len_usize);
        let $to_vec_const_ptr: *const u8 = copy $to_vec_mut_ptr as *const u8 (PtrToPtr);
        let $to_vec_non_null: core::ptr::non_null::NonNull::<u8> = core::ptr::non_null::NonNull::<u8> {
            pointer: copy $to_vec_const_ptr
        };
        let $to_vec_unique: core::ptr::unique::Unique::<u8> = core::ptr::unique::Unique::<u8> {
            pointer: move $to_vec_non_null,
            _marker: const core::marker::PhantomData::<u8>
        };
        let $to_vec_raw_inner: alloc::raw_vec::RawVecInner = alloc::raw_vec::RawVecInner {
            ptr: move $to_vec_unique,
            cap: copy $to_vec_len_usize_no_high_bit,
            alloc: const alloc::alloc::Global
        };
        let $to_vec_raw: alloc::raw_vec::RawVec::<u8> = alloc::raw_vec::RawVec::<u8> {
            inner: move $to_vec_raw_inner,
            _marker: const core::marker::PhantomData::<u8>
        };
        let $to_vec: alloc::vec::Vec::<u8> = alloc::vec::Vec::<u8> {
            buf: move $to_vec_raw,
            len: copy $to_vec_cap
        };
    }
}
                
