// RPL Keywords

kw_pattern = @{ "pattern" ~ !WordFollowing }
kw_patt    = @{ "patt" ~ !WordFollowing }
kw_util    = @{ "util" ~ !WordFollowing }

// Reserved words
kw_cstr   = @{ "cstr" ~ !WordFollowing }
kw_diag   = @{ "diag" ~ !WordFollowing }
kw_meta   = @{ "meta" ~ !WordFollowing }
kw_import = @{ "import" ~ !WordFollowing }

// Rust Keywords
kw_self         = @{ "self" ~ !WordFollowing }
kw_Self         = @{ "Self" ~ !WordFollowing }
kw_fn           = @{ "fn" ~ !WordFollowing }
kw_mut          = @{ "mut" ~ !WordFollowing }
kw_const        = @{ "const" ~ !WordFollowing }
kw_static       = @{ "static" ~ !WordFollowing }
kw_lang         = @{ "lang" ~ !WordFollowing }
kw_as           = @{ "as" ~ !WordFollowing }
kw_crate        = @{ "crate" ~ !WordFollowing }
kw_use          = @{ "use" ~ !WordFollowing }
kw_type         = @{ "type" ~ !WordFollowing }
kw_let          = @{ "let" ~ !WordFollowing }
kw_move         = @{ "move" ~ !WordFollowing }
kw_copy         = @{ "copy" ~ !WordFollowing }
kw_Len          = @{ "Len" ~ !WordFollowing }
kw_PtrToPtr     = @{ "PtrToPtr" ~ !WordFollowing }
kw_IntToInt     = @{ "IntToInt" ~ !WordFollowing }
kw_Transmute    = @{ "Transmute" ~ !WordFollowing }
kw_Add          = @{ "Add" ~ !WordFollowing }
kw_Sub          = @{ "Sub" ~ !WordFollowing }
kw_Mul          = @{ "Mul" ~ !WordFollowing }
kw_Div          = @{ "Div" ~ !WordFollowing }
kw_Rem          = @{ "Rem" ~ !WordFollowing }
kw_Lt           = @{ "Lt" ~ !WordFollowing }
kw_Le           = @{ "Le" ~ !WordFollowing }
kw_Gt           = @{ "Gt" ~ !WordFollowing }
kw_Ge           = @{ "Ge" ~ !WordFollowing }
kw_Eq           = @{ "Eq" ~ !WordFollowing }
kw_Ne           = @{ "Ne" ~ !WordFollowing }
kw_Offset       = @{ "Offset" ~ !WordFollowing }
kw_SizeOf       = @{ "SizeOf" ~ !WordFollowing }
kw_AlignOf      = @{ "AlignOf" ~ !WordFollowing }
kw_Neg          = @{ "Neg" ~ !WordFollowing }
kw_Not          = @{ "Not" ~ !WordFollowing }
kw_PtrMetadata  = @{ "PtrMetadata" ~ !WordFollowing }
kw_discriminant = @{ "discriminant" ~ !WordFollowing }
kw_Ctor         = @{ "Ctor" ~ !WordFollowing }
kw_from         = @{ "from" ~ !WordFollowing }
kw_of           = @{ "of" ~ !WordFollowing }
kw_raw          = @{ "raw" ~ !WordFollowing }
kw_drop         = @{ "drop" ~ !WordFollowing }
kw_break        = @{ "break" ~ !WordFollowing }
kw_continue     = @{ "continue" ~ !WordFollowing }
kw_loop         = @{ "loop" ~ !WordFollowing }
kw_switchInt    = @{ "switchInt" ~ !WordFollowing }
kw_true         = @{ "true" ~ !WordFollowing }
kw_false        = @{ "false" ~ !WordFollowing }
kw_unsafe       = @{ "unsafe" ~ !WordFollowing }
kw_pub          = @{ "pub" ~ !WordFollowing }
kw_struct       = @{ "struct" ~ !WordFollowing }
kw_enum         = @{ "enum" ~ !WordFollowing }
kw_impl         = @{ "impl" ~ !WordFollowing }
kw_for          = @{ "for" ~ !WordFollowing }
kw_u8           = @{ "u8" ~ !WordFollowing }
kw_u16          = @{ "u16" ~ !WordFollowing }
kw_u32          = @{ "u32" ~ !WordFollowing }
kw_u64          = @{ "u64" ~ !WordFollowing }
kw_usize        = @{ "usize" ~ !WordFollowing }
kw_i8           = @{ "i8" ~ !WordFollowing }
kw_i16          = @{ "i16" ~ !WordFollowing }
kw_i32          = @{ "i32" ~ !WordFollowing }
kw_i64          = @{ "i64" ~ !WordFollowing }
kw_isize        = @{ "isize" ~ !WordFollowing }
kw_RET          = @{ "RET" ~ !WordFollowing }

Keywords = @{
    kw_pattern
  | kw_patt
  | kw_util
  | kw_cstr
  | kw_diag
  | kw_meta
  | kw_import
  | kw_self
  | kw_Self
  | kw_fn
  | kw_mut
  | kw_const
  | kw_static
  | kw_lang
  | kw_as
  | kw_crate
  | kw_use
  | kw_type
  | kw_let
  | kw_move
  | kw_copy
  | kw_Len
  | kw_PtrToPtr
  | kw_IntToInt
  | kw_Transmute
  | kw_Add
  | kw_Sub
  | kw_Mul
  | kw_Div
  | kw_Rem
  | kw_Lt
  | kw_Le
  | kw_Gt
  | kw_Ge
  | kw_Eq
  | kw_Ne
  | kw_Offset
  | kw_SizeOf
  | kw_AlignOf
  | kw_Neg
  | kw_Not
  | kw_PtrMetadata
  | kw_discriminant
  | kw_Ctor
  | kw_from
  | kw_of
  | kw_raw
  | kw_drop
  | kw_break
  | kw_continue
  | kw_loop
  | kw_switchInt
  | kw_true
  | kw_false
  | kw_unsafe
  | kw_pub
  | kw_struct
  | kw_enum
  | kw_impl
  | kw_for
  | kw_u8
  | kw_u16
  | kw_u32
  | kw_u64
  | kw_usize
  | kw_i8
  | kw_i16
  | kw_i32
  | kw_i64
  | kw_isize
}

// Space and Comment
COMMENT    = _{ "//" ~ (!(NEWLINE) ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

// Symbols
LeftBrace    = @{ "{" }
RightBrace   = @{ "}" }
LeftBracket  = @{ "[" }
RightBracket = @{ "]" }
LeftParen    = @{ "(" }
RightParen   = @{ ")" }
LessThan     = @{ "<" }
GreaterThan  = @{ ">" }
Dollar       = @{ "$" }
Assign       = @{ "=" }
Comma        = @{ "," }
Dot          = @{ "." }
Dot2         = @{ ".." }
Colon        = @{ ":" }
Colon2       = @{ "::" }
SemiColon    = @{ ";" }
Hash         = @{ "#" }

Tilde      = @{ "~" }
And        = @{ "&" }
HashTilde  = @{ Hash ~ Tilde }
Bang       = @{ "!" }
Star       = @{ "*" }
Arrow      = @{ "->" }
RightArrow = @{ "=>" }
Quote      = @{ "'" }
Minus      = @{ "-" }
// Quote2     = @{ "\"" }
// At         = @{ "@" }

// place holder
PlaceHolder = @{ "_" }

// Literal
Literal = @{
    Integer
  | String
  | Bool
}

BIN_DIGIT = @{ '0'..'1' }
OCT_DIGIT = @{ '0'..'7' }
DEC_DIGIT = @{ '0'..'9' }
HEX_DIGIT = @{ '0'..'9' | 'a'..'f' | 'A'..'F' }

DEC_LITERAL = @{ DEC_DIGIT ~ (DEC_DIGIT | "_")* }
BIN_LITERAL = @{ "0b" ~ (BIN_DIGIT | "_")* ~ BIN_DIGIT ~ (BIN_DIGIT | "_")* }
OCT_LITERAL = @{ "0o" ~ (OCT_DIGIT | "_")* ~ OCT_DIGIT ~ (OCT_DIGIT | "_")* }
HEX_LITERAL = @{ "0x" ~ (HEX_DIGIT | "_")* ~ HEX_DIGIT ~ (HEX_DIGIT | "_")* }

IntegerSuffix = @{
    kw_u8
  | kw_u16
  | kw_u32
  | kw_u64
  | kw_usize
  | kw_i8
  | kw_i16
  | kw_i32
  | kw_i64
  | kw_isize
}

Integer = @{
    (DEC_LITERAL | BIN_LITERAL | OCT_LITERAL | HEX_LITERAL) ~ IntegerSuffix?
}

String = @{
    "\"" ~ (!"\"" ~ ANY)* ~ "\""
}
Bool   = @{
    kw_true
  | kw_false
}

// Identifier/ Word Related
WordLeading   = @{ 'a' .. 'z' | 'A' .. 'Z' | '\u{4e00}'..'\u{9FA5}' | '_'..'_' }
WordFollowing = @{ WordLeading | "_" | "-" | '0' .. '9' }
Word          = @{ WordLeading ~ (WordFollowing)* }

// RPL identifier and meta variables
Identifier   = @{ !(Keywords) ~ Word }
MetaVariable = @{ Dollar ~ Word }

// MetaVariable Declaration
MetaVariableDecl                    = { MetaVariable ~ Colon ~ Identifier }
MetaVariableDeclsSeparatedByComma   = {
    MetaVariableDecl ~ (Comma ~ MetaVariableDecl)* ~ Comma?
}
MetaVariableDeclList                = {
    LeftBracket ~ MetaVariableDeclsSeparatedByComma? ~ RightBracket
}
MetaVariableAssign                  = { MetaVariable ~ Assign ~ (Identifier | MetaVariable | Type) }
MetaVariableAssignsSeparatedByComma = {
    MetaVariableAssign ~ (Comma ~ MetaVariableAssign)* ~ Comma?
}
MetaVariableAssignList              = {
    LeftBracket ~ MetaVariableAssignsSeparatedByComma? ~ RightBracket
}

// Attributes
Attribute                  = {
    (Word ~ Assign ~ Word)
  | Word
}
AttributesSeparatedByComma = {
    Attribute ~ (Comma ~ Attribute)* ~ Comma?
}
AttributeList              = {
    LeftBracket ~ AttributesSeparatedByComma? ~ RightBracket
}
PreItemAttribute           = { Hash ~ AttributeList }
PostItemAttribute          = { HashTilde ~ AttributeList }

// Rust Items

Mutability = { kw_mut? }

PtrMutability = {
    kw_mut
  | kw_const
}

Region = {
    Quote ~ (PlaceHolder | kw_static)
}

QSelf = {
    LessThan ~ Type ~ kw_as ~ (Identifier | MetaVariable) ~ GreaterThan
}

Path = {
    PathLeading? ~ PathSegment ~ (Colon2 ~ PathSegment)*
}

PathArguments = {
    AngleBracketedGenericArguments
}

Pathcrate = {
    Dollar ~ kw_crate
}

PathLeading = {
    Pathcrate? ~ Colon2
}

PathSegment = {
    (Identifier | MetaVariable) ~ PathArguments?
}

TypePath = {
    QSelf? ~ Path
}

Konst = {
    Literal
  | TypePath
}

GenericConst = {
    LeftBrace ~ Konst ~ RightBrace
  | Konst
}

GenericArgument = {
    Region
  | Type
  | GenericConst
}

GenericArgumentsSepretatedByComma = {
    GenericArgument ~ (Comma ~ GenericArgument)* ~ Comma?
}

AngleBracketedGenericArguments = {
    Colon2? ~ LessThan ~ GenericArgumentsSepretatedByComma ~ GreaterThan
}

LangItemWithArgs = {
    Hash ~ LeftBracket ~ kw_lang ~ Assign ~ String ~ RightBracket ~ AngleBracketedGenericArguments?
}

TypesSeparatedByComma = {
    Type ~ (Comma ~ Type)* ~ Comma?
}

TypeArray = {
    LeftBracket ~ Type ~ SemiColon ~ Integer ~ RightBracket
}

TypeGroup = {
    "Group" ~ Type
}

TypeNever = {
    Bang
}

TypeParen = {
    LeftParen ~ Type ~ RightParen
}

TypePtr = {
    Star ~ PtrMutability? ~ Type
}

TypeReference = {
    And ~ Region? ~ PtrMutability? ~ Type
}

TypeSlice = {
    LeftBracket ~ Type ~ RightBracket
}

TypeTuple = {
    LeftParen ~ TypesSeparatedByComma? ~ RightParen
}

TypeMetaVariable = {
    MetaVariable
}

Type = {
    TypeArray
  | TypeGroup
  | TypeNever
  | TypeParen
  | TypeMetaVariable
  | TypePtr
  | TypeReference
  | TypeSlice
  | TypeTuple
  | TypePath
  | LangItemWithArgs
  | kw_Self
  | IntegerSuffix
  | PlaceHolder
}

SelfParam = {
    And? ~ Mutability ~ kw_self ~ (Colon ~ Type)?
}

FnParam = {
    SelfParam
  | NormalParam
  | Dot2
  | PlaceHolder
}

ParamPat = {
    Mutability ~ (Identifier | MetaVariable)
}

NormalParam = {
    ParamPat? ~ Colon ~ Type
}

Dollarself = @{ Dollar ~ kw_self }
DollarRET  = @{ Dollar ~ kw_RET }

MirPlaceLocal = {
    PlaceHolder
  | Dollarself
  | DollarRET
  | MetaVariable
}

MirPlaceParen = {
    LeftParen ~ MirPlace ~ RightParen
}

MirPlaceDeref = {
    Star ~ MirPlace
}

MirPlaceField = {
    Dot ~ (MetaVariable | Identifier | Integer)
}

MirPlaceIndex = {
    LeftBracket ~ MirPlaceLocal ~ RightBracket
}

MirPlaceConstIndex = {
    LeftBracket ~ Minus? ~ Integer ~ kw_of ~ Integer ~ RightBracket
}

MirPlaceSubslice = {
    LeftBracket ~ Integer? ~ Colon ~ Minus? ~ Integer? ~ RightBracket
}

MirPlaceDowncast = {
    kw_as ~ (MetaVariable | Identifier)
}

MirBasicPlace = {
    MirPlaceLocal
  | MirPlaceParen
  | MirPlaceDeref
}

MirPlaceSuffix = {
    MirPlaceField
  | MirPlaceIndex
  | MirPlaceConstIndex
  | MirPlaceSubslice
  | MirPlaceDowncast
}

// Eliminate left recursion
MirPlace = {
    MirBasicPlace ~ MirPlaceSuffix*
}

MirOperandMove = {
    kw_move ~ MirPlace
}

MirOperandCopy = {
    kw_copy ~ MirPlace
}

MirOperandConstant = {
    kw_const ~ (Literal | LangItemWithArgs | TypePath)
}

MirOperand = {
    PlaceHolder
  | Dot2
  | MirOperandMove
  | MirOperandCopy
  | MirOperandConstant
}

MirRvalueUse = {
    LeftParen ~ MirOperand ~ RightParen
  | MirOperand
}

MirRvalueRepeat = {
    LeftBracket ~ MirOperand ~ SemiColon ~ Integer ~ RightBracket
}

MirRvalueRef = {
    And ~ Region? ~ Mutability ~ MirPlace
}

MirRvalueRawPtr = {
    And ~ kw_raw ~ PtrMutability ~ MirPlace
}

MirRvalueLen = {
    kw_Len ~ LeftParen ~ MirPlace ~ RightParen
}

MirCastKind = {
    kw_PtrToPtr
  | kw_IntToInt
  | kw_Transmute
}

MirRvalueCast = {
    MirOperand ~ kw_as ~ Type ~ LeftParen ~ MirCastKind ~ RightParen
}

MirBinOp = {
    kw_Add
  | kw_Sub
  | kw_Mul
  | kw_Div
  | kw_Rem
  | kw_Lt
  | kw_Le
  | kw_Gt
  | kw_Ge
  | kw_Eq
  | kw_Ne
  | kw_Offset
}

MirRvalueBinOp = {
    MirBinOp ~ LeftParen ~ MirOperand ~ Comma ~ MirOperand ~ RightParen
}

MirNullOp = {
    kw_SizeOf
  | kw_AlignOf
}

MirRvalueNullOp = {
    MirNullOp ~ LeftParen ~ Type ~ RightParen
}

MirUnOp = {
    kw_Neg
  | kw_Not
  | kw_PtrMetadata
}

MirRvalueUnOp = {
    MirUnOp ~ LeftParen ~ MirOperand ~ RightParen
}

MirRvalueDiscriminant = {
    kw_discriminant ~ LeftParen ~ MirPlace ~ RightParen
}

MirOperandsSeparatedByComma = {
    MirOperand ~ (Comma ~ MirOperand)* ~ Comma?
}

MirAggregateArray = {
    LeftBracket ~ MirOperandsSeparatedByComma? ~ RightBracket
}

MirAggregateTuple = {
    LeftParen ~ MirOperandsSeparatedByComma? ~ RightParen
}

PathOrLangItem = {
    Path
  | LangItemWithArgs
}

MirAggregateAdtStructField = {
    Identifier ~ Colon ~ MirOperand
}

MirAggregateAdtStructFieldsSeparatedByComma = {
    MirAggregateAdtStructField ~ (Comma ~ MirAggregateAdtStructField)* ~ Comma?
}

MirAggregateAdtStruct = {
    PathOrLangItem ~ LeftBrace ~ MirAggregateAdtStructFieldsSeparatedByComma? ~ RightBrace
}

MirAggregateAdtTuple = {
    Hash ~ LeftBracket ~ kw_Ctor ~ RightBracket ~ Path ~ LeftParen ~ MirOperandsSeparatedByComma? ~ RightParen
}

MirAggregateAdtUnit = {
    PathOrLangItem
}

MirAggregateRawPtr = {
    TypePtr ~ kw_from ~ LeftParen ~ MirOperand ~ Comma ~ MirOperand ~ RightParen
}

MirRvalueAggregate = {
    MirAggregateArray
  | MirAggregateTuple
  | MirAggregateAdtStruct
  | MirAggregateAdtTuple
  | MirAggregateAdtUnit
  | MirAggregateRawPtr
}

MirRvalue = {
    PlaceHolder
  | MirRvalueCast // prior to MirRvalueUse -> .. -> MirRvalueDowncast

  | MirRvalueUse
  | MirRvalueRepeat
  | MirRvalueRef
  | MirRvalueRawPtr
  | MirRvalueLen
  | MirRvalueBinOp
  | MirRvalueNullOp
  | MirRvalueUnOp
  | MirRvalueDiscriminant
  | MirRvalueAggregate // | ShallowInitBox
  // | CopyForDeref
}

MirFnOperand = {
    LeftParen ~ MirOperandCopy ~ RightParen
  | LeftParen ~ MirOperandMove ~ RightParen
  | TypePath
  | LangItemWithArgs
  | MetaVariable
}

MirCall = {
    MirFnOperand ~ LeftParen ~ MirOperandsSeparatedByComma? ~ RightParen
}

MirRvalueOrCall = {
    MirCall
  | MirRvalue
}

MirTypeDecl = {
    kw_type ~ Identifier ~ Assign ~ Type ~ SemiColon
}

MirLocalDecl = {
    kw_let ~ Mutability ~ MirPlaceLocal ~ Colon ~ Type ~ (Assign ~ MirRvalueOrCall)? ~ SemiColon
}

UsePath = {
    kw_use ~ Path ~ SemiColon
}

MirDecl = {
    MirTypeDecl
  | UsePath
  | MirLocalDecl
}

MirCallIgnoreRet = {
    PlaceHolder ~ Assign ~ MirCall
}

MirDrop = {
    kw_drop ~ LeftParen ~ MirPlace ~ RightParen
}

Label = {
    Quote ~ Identifier
}

MirControl = {
    (kw_break | kw_continue) ~ Label?
}

MirStmtBlock = {
    LeftBrace ~ MirStmt* ~ RightBrace
}

MirLoop = {
    (Label ~ Colon)? ~ kw_loop ~ MirStmtBlock
}

MirSwitchValue = {
    Bool
  | Integer
  | PlaceHolder
}

// A MirStmt without SemiColon
MirSwitchBody = {
    MirStmtBlock
  | (MirCallIgnoreRet | MirDrop | MirControl | MirAssign) ~ Comma
  | MirLoop
  | MirSwitchInt
}

MirSwitchTarget = {
    MirSwitchValue ~ RightArrow ~ MirSwitchBody
}

MirSwitchInt = {
    kw_switchInt ~ LeftParen ~ MirOperand ~ RightParen ~ LeftBrace ~ (MirSwitchTarget)* ~ RightBrace
}

MirAssign = {
    MirPlace ~ Assign ~ MirRvalueOrCall
}

MirStmt = {
    MirCallIgnoreRet ~ SemiColon
  | MirDrop ~ SemiColon
  | MirControl ~ SemiColon
  | MirAssign ~ SemiColon
  | MirLoop
  | MirSwitchInt
}

MirBody = {
    (MirDecl)* ~ (MirStmt)*
}

FnName = {
    PlaceHolder
  | MetaVariable
  | Identifier
}

FnParamsSeparatedByComma = {
    FnParam ~ (Comma ~ FnParam)* ~ Comma?
}

FnSig = {
    kw_unsafe? ~ kw_pub? ~ kw_fn ~ FnName ~ LeftParen ~ FnParamsSeparatedByComma? ~ RightParen ~ FnRet
}

FnBody = {
    SemiColon
  | LeftBrace ~ MirBody ~ RightBrace
}

FnRet = {
    Arrow ~ (PlaceHolder | Type)
}

Fn = { FnSig ~ FnBody }

Field = {
    MetaVariable ~ Colon ~ Type
}

FieldsSeparatedByComma = {
    Field ~ (Comma ~ Field)* ~ Comma?
}

Struct = {
    kw_pub? ~ kw_struct ~ MetaVariable ~ LeftBrace ~ FieldsSeparatedByComma? ~ RightBrace
}

EnumVariant = {
    Identifier ~ LeftBrace ~ FieldsSeparatedByComma? ~ RightBrace
  | Identifier ~ LeftParen ~ Type ~ RightParen
  | Identifier
}

EnumVariantsSeparatedByComma = {
    EnumVariant ~ (Comma ~ EnumVariant)* ~ Comma?
}

Enum = {
    kw_enum ~ MetaVariable ~ LeftBrace ~ EnumVariantsSeparatedByComma? ~ RightBrace
}

ImplKind = {
    Path ~ kw_for
}

Impl = {
    kw_impl ~ ImplKind? ~ Type ~ LeftBrace ~ (Fn)* ~ RightBrace
}

RustItem = { Fn | Struct | Enum | Impl }

RustItems = { LeftBrace ~ (RustItem)+ ~ RightBrace }

PatternConfiguration = {
    Identifier ~ MetaVariableAssignList
}

// FIXME
PatternOperation = {
    PatternConfiguration
}

RustItemOrPatternOperation = {
    RustItem
  | RustItems
  | PatternOperation
}

// patt block Item
pattBlockItem = {
    Identifier ~ MetaVariableDeclList? ~ Assign ~ PreItemAttribute? ~ RustItemOrPatternOperation ~ PostItemAttribute?
}

MetaVariableWithDiagMessage = {
    MetaVariable ~ Colon ~ String
}

MetaVariableWithDiagMessageSeparatedByComma = {
    MetaVariableWithDiagMessage ~ (Comma ~ MetaVariableWithDiagMessage)* ~ Comma?
}

// diag block Item
diagBlockItem = {
    Identifier ~ Assign ~ LeftBrace ~ (String ~ Comma)? ~ MetaVariableWithDiagMessageSeparatedByComma? ~ RightBrace
}

// RPL Blocks
pattBlock =  {
    kw_patt ~ LeftBrace ~ (UsePath)* ~ (pattBlockItem)* ~ RightBrace
}
utilBlock =  {
    kw_util ~ LeftBrace ~ (UsePath)* ~ (pattBlockItem)* ~ RightBrace
}
diagBlock =  {
    kw_diag ~ LeftBrace ~ (diagBlockItem)* ~ RightBrace
}
Block     = _{ pattBlock | utilBlock | diagBlock }

// RPL Header
RPLHeader = { kw_pattern ~ Identifier }

// RPL Pattern
RPLPattern = { RPLHeader ~ Block* }

// RPL File entry
main = { SOI ~ RPLPattern ~ EOI }
